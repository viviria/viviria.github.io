{"version":3,"sources":["assets/scripts/modules/customerCardManager.js","assets/scripts/modules/food.js","assets/scripts/modules/gameManager.js","assets/scripts/game.js","assets/scripts/modules/mapTIleManager.js","assets/scripts/modules/mapTile.js","assets/scripts/map.js","assets/scripts/modules/marketingCardManager.js","assets/scripts/modules/playerDetailWindow.js","assets/scripts/modules/player.js"],"names":["CustomerCardManager","_classCallCheck","this","_deck","_customerCardData","value","array","i","length","n","Math","floor","cc","random0To1","tmp","data","slice","_shuffle","pop","card","push","module","exports","FoodType","Enum","MEET","VEGETABLE","DRINK","FRUIT","SPECIAL","SpecialFoodType","SEKIRYU","Food","foodType","specialFoodType","_foodType","_specialFoodType","get","Player","require","GameManager","playerNum","playerNames","_players","_turnPlayerIndex","num","p","log","MapTileManagerModule","MapTileManager","IconType","IconNames","MarketingCardManager","GameState","PLAYING","PLAYER_DETAIL_WINDOW","LeftWindowState","OTHER_PLAYER_WINDOW","CUSTOMER_WINDOW","ACTION_WINDOW","PLAYER_NAMES","Class","extends","Component","properties","customersAtlas","default","type","SpriteAtlas","iconsAtlas","_isLoadEnd","_playerNum","_gameState","_LeftWindowState","_gameManager","_mapTileManager","_customerCardManager","_marketingCardManager","onTapClosePlayerDetailWindow","_this","node","getChildByName","getComponent","close","onTapShowPlayerDetailWindow","window","active","open","onTapChangeLeftWindow","otherPlayersWindow","customersWindow","actionsWindow","updatePlayerDetail","players","getPlayers","player","name","point","foodHands","specialHands","playerWindow","isOwn","Label","string","playerPointWindow","openCustomerSetting","customers","getChildren","customer","drawCard","Sprite","spriteFrame","getSpriteFrame","image","pointLabel","specialCustomer","specialFood","foodArray","food","j","foods","countAllIconFood","k","ALL","_k","all","setCustomerFoodIcon","customerNode","x","y","foodName","Node","MEAT","scaleX","scaleY","scale","addComponent","addChild","ICON_SIZE","touchSetting","on","EventType","TOUCH_START","event","getLocation","TOUCH_MOVE","TOUCH_END","init","director","getCollisionManager","enabled","onLoad","_this2","loader","load","url","raw","error","gameInit","showPlayer","playerIcons","playerIcon","map","setMapTileManager","createEmptyMap","start","update","dt","FRUITS","START","EMPTY","REVERSE","_startMapTile","_mapTileData","filter","tile","mapTileAtlas","_type","_playerIcon","setMapTile","iconType","edges","joins","join","setPlayerIcon","removeFromParent","position","removePlayerIcon","removeChild","mapTile","Prefab","_mapWidth","_mapHeight","manager","__setMapSize","__setStartMap","startTiles","startTileData","rangeX","end","rangeY","activeTileX","addX","instantiate","size","getContentSize","width","height","_marketingCardData","runAction","scaleTo","callback","sequence","callFunc","_name","_isOwn","_point","_foodHands","_specialHands","_cutomers","special"],"mappings":"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","sourcesContent":["class CustomerCardManager {\r\n  constructor() {\r\n    this._deck = null;\r\n    this._customerCardData = null;\r\n  }\r\n\r\n  _shuffle(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const n = Math.floor(cc.random0To1() * (i + 1));\r\n      const tmp = array[i];\r\n      array[i] = array[n];\r\n      array[n] = tmp;\r\n    }\r\n  }\r\n\r\n  load(data) {\r\n    this._customerCardData = data;\r\n    this._deck = this._customerCardData.slice(0, this._customerCardData.length);\r\n    this._shuffle(this._deck);\r\n  }\r\n\r\n  drawCard() {\r\n    return this._deck.pop();\r\n  }\r\n\r\n  mixDeckCard(card) {\r\n    this._deck.push(card);\r\n  }\r\n\r\n  shuffleDeck() {\r\n    this._shuffle(this._deck);\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  CustomerCardManager: CustomerCardManager,\r\n};","const FoodType = cc.Enum({\r\n  MEET: 0,\r\n  VEGETABLE: 1,\r\n  DRINK: 2,\r\n  FRUIT: 3,\r\n  SPECIAL: 4,\r\n});\r\n\r\nconst SpecialFoodType = cc.Enum({\r\n  SEKIRYU: 0,\r\n});\r\n\r\nclass Food {\r\n  constructor(foodType, specialFoodType) {\r\n    this._foodType = foodType;\r\n    this._specialFoodType = specialFoodType;\r\n  }\r\n\r\n  get type() {\r\n    return this._foodType;\r\n  }\r\n\r\n  get specialFoodType() {\r\n    return this._specialFoodType;\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  Food: Food,\r\n  FoodType: FoodType,\r\n  SpecialFoodType: SpecialFoodType,\r\n};","const Player = require(\"player\").Player;\r\n\r\nconst OWN_NAME = \"hiro\";\r\n\r\nclass GameManager {\r\n  constructor(playerNum, playerNames) {\r\n    this._players = [];\r\n    this._turnPlayerIndex = 0;\r\n\r\n    const num = playerNum > playerNames.length ? playerNames.length : playerNum;\r\n    for (let i = 0; i < num; i++) {\r\n      const p = new Player(playerNames[i], playerNames[i] == OWN_NAME);\r\n      this._players.push(p);\r\n    }\r\n\r\n    // TODO: カードとタイルのロード\r\n  }\r\n  \r\n  getPlayers() {\r\n    return this._players;\r\n  }\r\n\r\n  init() {\r\n    // テスト中はターンプレイヤを固定しておく\r\n    // this._turnPlayerIndex = Math.floor(cc.random0To1() * this._players.length);\r\n\r\n    // TODO: 手番差ハンデの実装\r\n\r\n  }\r\n\r\n  cleanUp() {\r\n    // 次のターンプレイヤへ\r\n    this._turnPlayerIndex = (this._turnPlayerIndex + 1) % this._players.length;\r\n  }\r\n\r\n  getTurnPlayer() {\r\n    return this._players[this._turnPlayerIndex];\r\n  }\r\n\r\n  showPlayer() {\r\n    for (let i = 0; i < this._players.length; i++) {\r\n      cc.log(this._players[i]);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  GameManager: GameManager,\r\n};","const GameManager = require(\"./modules/gameManager\").GameManager;\r\nconst MapTileManagerModule = require(\"./modules/mapTIleManager\");\r\nconst MapTileManager = MapTileManagerModule.MapTileManager;\r\nconst IconType = MapTileManagerModule.IconType;\r\nconst IconNames = MapTileManagerModule.IconNames;\r\nconst CustomerCardManager = require(\"./modules/customerCardManager\").CustomerCardManager;\r\nconst MarketingCardManager = require(\"./modules/marketingCardManager\").MarketingCardManager;\r\n\r\nconst GameState = cc.Enum({\r\n  PLAYING: 0,\r\n  PLAYER_DETAIL_WINDOW: 1,\r\n});\r\n\r\nconst LeftWindowState = cc.Enum({\r\n  OTHER_PLAYER_WINDOW: 0,\r\n  CUSTOMER_WINDOW: 1,\r\n  ACTION_WINDOW: 2,\r\n});\r\n\r\nconst PLAYER_NAMES = [\"hiro\", \"aya\", \"shino\", \"yomo\"];\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n      customersAtlas: {\r\n        default: null,\r\n        type: cc.SpriteAtlas\r\n      },\r\n\r\n      iconsAtlas: {\r\n        default: null,\r\n        type: cc.SpriteAtlas\r\n      },\r\n\r\n      _isLoadEnd: false,\r\n\r\n      _playerNum: 0,\r\n      _gameState: GameState.PLAYING,\r\n      _LeftWindowState: LeftWindowState.OTHER_PLAYER_WINDOW,\r\n\r\n      _gameManager: null,\r\n      _mapTileManager: null,\r\n      _customerCardManager: null,\r\n      _marketingCardManager: null,\r\n    },\r\n\r\n    onTapClosePlayerDetailWindow() {\r\n      if (this._gameState != GameState.PLAYER_DETAIL_WINDOW) {\r\n        return;\r\n      }\r\n\r\n      const window = this.node.getChildByName(\"playerDetailWindow\");\r\n      window.getComponent(\"playerDetailWindow\").close(() => {\r\n        this._gameState = GameState.PLAYING;\r\n      });\r\n    },\r\n\r\n    onTapShowPlayerDetailWindow() {\r\n      const window = this.node.getChildByName(\"playerDetailWindow\");\r\n      if (window.active || this._gameState != GameState.PLAYING) {\r\n        return;\r\n      }\r\n\r\n      this._gameState = GameState.PLAYER_DETAIL_WINDOW;\r\n      window.getComponent(\"playerDetailWindow\").open();\r\n    },\r\n\r\n    onTapChangeLeftWindow() {\r\n      const otherPlayersWindow = this.node.getChildByName(\"otherPlayersWindow\");\r\n      const customersWindow = this.node.getChildByName(\"customersWindow\");\r\n      const actionsWindow = this.node.getChildByName(\"actionsWindow\");\r\n\r\n      otherPlayersWindow.active = false;\r\n      customersWindow.active = false;\r\n      actionsWindow.active = false;\r\n\r\n      switch (this._LeftWindowState) {\r\n        case LeftWindowState.OTHER_PLAYER_WINDOW:\r\n          customersWindow.active = true;\r\n          this._LeftWindowState = LeftWindowState.CUSTOMER_WINDOW;\r\n          break;\r\n        case LeftWindowState.CUSTOMER_WINDOW:\r\n          actionsWindow.active = true;\r\n          this._LeftWindowState = LeftWindowState.ACTION_WINDOW;\r\n          break;\r\n        case LeftWindowState.ACTION_WINDOW:\r\n          otherPlayersWindow.active = true;\r\n          this._LeftWindowState = LeftWindowState.OTHER_PLAYER_WINDOW;\r\n          break;\r\n      }\r\n\r\n      // TODO: ウィンドウズ切り替えアニメーションを実装\r\n    },\r\n\r\n    // プレイヤの詳細を更新\r\n    updatePlayerDetail() {\r\n      const players = this._gameManager.getPlayers();\r\n      for (let i = 0; i < players.length; i++) {\r\n        const player = players[i];\r\n        const name = player.name;\r\n        const point = player.point;\r\n        const foodHands = player.foodHands;\r\n        const specialHands = player.specialHands;\r\n\r\n        const otherPlayersWindow = this.node.getChildByName(\"otherPlayersWindow\");\r\n        const playerWindow = otherPlayersWindow.getChildByName(name);\r\n\r\n        if (player.isOwn) {\r\n          const pointLabel = this.node.getChildByName(\"pointLabel\").getComponent(cc.Label);\r\n          pointLabel.string = point + \"pt\";\r\n        } else if (playerWindow) {\r\n          const pointLabel = playerWindow.getChildByName(\"pointLabel\").getComponent(cc.Label);\r\n          pointLabel.string = point + \"pt\";\r\n          const handNumLabel = playerWindow.getChildByName(\"handNumLabel\").getComponent(cc.Label);\r\n          handNumLabel.string = \"×\" + foodHands.length;\r\n          const marketingHandNumLabel = playerWindow.getChildByName(\"marketingHandNumLabel\").getComponent(cc.Label);\r\n          marketingHandNumLabel.string = \"×\" + specialHands.length;\r\n        }\r\n\r\n        const otherPlayersPointWindow = this.node.getChildByName(\"otherPlayersPointWindow\");\r\n        const playerPointWindow = otherPlayersPointWindow.getChildByName(name);\r\n\r\n        if (!player.isOwn) {\r\n          const pointLabel = playerPointWindow.getChildByName(\"pointLabel\").getComponent(cc.Label);\r\n          pointLabel.string = point + \"pt\";\r\n        }\r\n      }\r\n    },\r\n\r\n    // お客さんカードを配置\r\n    openCustomerSetting() {\r\n      const customers = this.node.getChildByName(\"customersWindow\").getChildByName(\"customers\").getChildren();\r\n      for (let i = 0; i < customers.length; i++) {\r\n        if (i < this._playerNum + 1) {\r\n          customers[i].active = true;\r\n          const customer = this._customerCardManager.drawCard();\r\n          customers[i].getComponent(cc.Sprite).spriteFrame = this.customersAtlas.getSpriteFrame(customer.image);\r\n          \r\n          const pointLabel = customers[i].getChildByName(\"pointLabel\").getComponent(cc.Label);\r\n          pointLabel.string = customer.point + \"pt\";\r\n\r\n          if (customer.specialCustomer.length > 0 || customer.specialFood.length > 0) {\r\n            pointLabel.string += \"+\";\r\n          }\r\n          \r\n          const foodArray = customer.food;\r\n          if (foodArray.length > 1) {\r\n            customers[i].getChildByName(\"line\").active = true;\r\n          }\r\n          for (let j = 0; j < foodArray.length; j++) {\r\n            const foods = foodArray[j];\r\n            let countAllIconFood = 0;\r\n            for (let k = 0; k < foods.length; k++) {\r\n              if (foods[k] == IconType.ALL) {\r\n                countAllIconFood++;\r\n              }\r\n            }\r\n            for (let k = 0; k < foods.length; k++) {\r\n              if (countAllIconFood > 0) {\r\n                const all = customers[i].getChildByName(\"all\");\r\n                all.active = true;\r\n                const numLabel = all.getChildByName(\"numLabel\").getComponent(cc.Label);\r\n                numLabel.string = \"×\" + countAllIconFood;\r\n              } else {\r\n                this.setCustomerFoodIcon(customers[i], foods[k], k, j);\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          customers[i].active = false;\r\n        }\r\n      }\r\n    },\r\n\r\n    setCustomerFoodIcon(customerNode, food, x, y) {\r\n      const ICON_SIZE = 50;\r\n      const foodName = IconNames[food];\r\n      const node = new cc.Node();\r\n      switch (food) {\r\n        case IconType.MEAT:\r\n          node.scaleX = -0.4;\r\n          node.scaleY = 0.4;\r\n          break;\r\n        case IconType.SPECIAL:\r\n          node.scale = 0.2;\r\n          break;\r\n        default:\r\n          node.scale = 0.4;\r\n      }\r\n      const sprite = node.addComponent(cc.Sprite);\r\n      sprite.spriteFrame = this.iconsAtlas.getSpriteFrame(foodName + \"_icon\");\r\n      const foodIcons = customerNode.getChildByName(\"foodIcons\");\r\n      foodIcons.addChild(node);\r\n      node.x = x * ICON_SIZE - ICON_SIZE / 2;\r\n      node.y = y * -ICON_SIZE + ICON_SIZE / 2;\r\n    },\r\n\r\n    touchSetting() {\r\n      this.node.on(cc.Node.EventType.TOUCH_START, (event) => {\r\n        const point = event.getLocation();\r\n      });\r\n\r\n      this.node.on(cc.Node.EventType.TOUCH_MOVE, (event) => {\r\n        const point = event.getLocation();\r\n      });\r\n\r\n      this.node.on(cc.Node.EventType.TOUCH_END, (event) => {\r\n      });\r\n    },\r\n\r\n    init() {\r\n      cc.director.getCollisionManager().enabled = true;\r\n\r\n      this._isLoadEnd = false;\r\n      this._playerNum = 4;\r\n      \r\n      this._gameManager = new GameManager(this._playerNum, PLAYER_NAMES);\r\n      this._mapTileManager = new MapTileManager();\r\n      this._customerCardManager = new CustomerCardManager();\r\n      this._marketingCardManager = new MarketingCardManager();\r\n    },\r\n\r\n    onLoad () {\r\n      this.init();\r\n      \r\n      cc.loader.load(cc.url.raw(\"resources/json/mapTile.json\"), (error, data) => {\r\n        if (error !== null) return;\r\n        this._mapTileManager.load(data);\r\n        cc.loader.load(cc.url.raw(\"resources/json/customer.json\"), (error, data) => {\r\n          if (error !== null) return;\r\n          this._customerCardManager.load(data);\r\n          cc.loader.load(cc.url.raw(\"resources/json/market.json\"), (error, data) => {\r\n            if (error !== null) return;\r\n            this._marketingCardManager.load(data);\r\n            this._isLoadEnd = true;\r\n          });\r\n        });\r\n      });\r\n    },\r\n\r\n    gameInit() {\r\n      this._gameManager.showPlayer();\r\n      this._gameManager.init();\r\n\r\n      this.updatePlayerDetail();\r\n\r\n      const playerIcons = [];\r\n      for (let i = 0; i < PLAYER_NAMES.length; i++) {\r\n        const playerIcon = this.node.getChildByName(PLAYER_NAMES[i]);\r\n        if (i < this._playerNum) {\r\n          playerIcons.push(playerIcon);\r\n        } else {\r\n          playerIcon.active = false;\r\n        }\r\n      }\r\n\r\n      const map = this.node.getChildByName(\"map\");\r\n      map.getComponent(\"map\").setMapTileManager(this._mapTileManager);\r\n      map.getComponent(\"map\").createEmptyMap(this._playerNum, playerIcons);\r\n\r\n      this.openCustomerSetting();\r\n\r\n      this.touchSetting();\r\n    },\r\n\r\n    start () {},\r\n\r\n    update (dt) {\r\n      if (this._isLoadEnd) {\r\n        this.gameInit();\r\n        this._isLoadEnd = false;\r\n      }\r\n    },\r\n});\r\n","const IconType = cc.Enum({\r\n  MEAT: 0,\r\n  VEGETABLE: 1,\r\n  DRINK: 2,\r\n  FRUITS: 3,\r\n  SPECIAL: 4,\r\n  ALL: 5,\r\n  START: 6,\r\n  EMPTY: 7,\r\n  REVERSE: 8,\r\n});\r\n\r\nconst IconNames = [\r\n  \"meat\",\r\n  \"vegetable\",\r\n  \"drink\",\r\n  \"fruits\",\r\n  \"special\",\r\n  \"all\",\r\n  \"start\",\r\n  \"empty\",\r\n  \"reverse\",\r\n]\r\n\r\nclass MapTileManager {\r\n  constructor() {\r\n    this._deck = null;\r\n    this._startMapTile = null;\r\n    this._mapTileData = null;\r\n  }\r\n\r\n  _shuffle(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const n = Math.floor(cc.random0To1() * (i + 1));\r\n      const tmp = array[i];\r\n      array[i] = array[n];\r\n      array[n] = tmp;\r\n    }\r\n  }\r\n\r\n  load(data) {\r\n    this._mapTileData = data;\r\n    this._deck = this._mapTileData.filter(x => x.type !== IconType.START);\r\n    this._startMapTile = this._mapTileData.filter(x => x.type == IconType.START);\r\n    this._shuffle(this._deck);\r\n    this._shuffle(this._startMapTile);\r\n  }\r\n\r\n  get startTiles() {\r\n    return this._startMapTile;\r\n  }\r\n\r\n  get drawTile() {\r\n    return this._deck.pop();\r\n  }\r\n\r\n  mixDeckTile(tile) {\r\n    this._deck.push(tile);\r\n    this._shuffle(this._deck);\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  IconType: IconType,\r\n  IconNames: IconNames,\r\n  MapTileManager: MapTileManager,\r\n}","const MapTileManagerModule = require(\"./mapTIleManager\");\r\nconst IconType = MapTileManagerModule.IconType;\r\nconst IconNames = MapTileManagerModule.IconNames;\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n      mapTileAtlas: {\r\n        default: null,\r\n        type: cc.SpriteAtlas\r\n      },\r\n\r\n      _type: IconType.EMPTY,\r\n      _playerIcon: null,\r\n    },\r\n\r\n    setMapTile(iconType, data) {\r\n      this._type = iconType;\r\n      const icon = this.node.getChildByName(\"icon\");\r\n      icon.getComponent(cc.Sprite).spriteFrame = this.mapTileAtlas.getSpriteFrame(IconNames[this._type]);\r\n      const edges = this.node.getChildByName(\"edges\").getChildren();\r\n      const joins = data.join;\r\n      for (let i = 0; i < edges.length; i++) {\r\n        edges[i].getComponent(cc.Sprite).spriteFrame = this.mapTileAtlas.getSpriteFrame(\"edge\" + joins[i]);\r\n      }\r\n    },\r\n\r\n    setPlayerIcon(playerIcon) {\r\n      this._playerIcon = playerIcon;\r\n      this._playerIcon.removeFromParent();\r\n      this.node.addChild(this._playerIcon);\r\n      this._playerIcon.position = cc.p(-30, 30);\r\n    },\r\n\r\n    removePlayerIcon() {\r\n      this.node.removeChild(this._playerIcon);\r\n      const tmp = this._playerIcon;\r\n      this._playerIcon = null;\r\n      return tmp;\r\n    },\r\n\r\n    // onLoad () {},\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","const MapTileManagerModule = require(\"./modules/mapTIleManager\");\r\nconst IconType = MapTileManagerModule.IconType;\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n      mapTile : {\r\n        default: null,\r\n        type: cc.Prefab\r\n      },\r\n\r\n      _mapTileManager: null,\r\n\r\n      _mapWidth: 0,\r\n      _mapHeight: 0,\r\n    },\r\n\r\n    setMapTileManager(manager) {\r\n      this._mapTileManager = manager;\r\n    },\r\n\r\n    __setMapSize(playerNum) {\r\n      switch (playerNum) {\r\n        case 2:\r\n          this._mapWidth = 5;\r\n          this._mapHeight = 5;\r\n          break;\r\n        case 3:\r\n        case 4:\r\n          this._mapWidth = 7;\r\n          this._mapHeight = 7;\r\n          break;\r\n      }\r\n    },\r\n\r\n    __setStartMap(playerNum, playerIcons) {\r\n      const tiles = this.node.getChildren();\r\n      const startTiles = tiles.filter((n, i) => {\r\n        const x = i % this._mapWidth;\r\n        const y = Math.floor(i / this._mapWidth);\r\n        if (playerNum < 3) {\r\n          return n.active && (y == 0 || y == this._mapHeight - 1);\r\n        } else {\r\n          return n.active && (y == 0 || y == this._mapHeight - 1 || x == 0 || x == this._mapWidth - 1);\r\n        }\r\n      });\r\n\r\n      const startTileData = this._mapTileManager.startTiles;\r\n\r\n      for (let i = 0; i < startTiles.length; i++) {\r\n        startTiles[i].getComponent(\"mapTile\").setMapTile(IconType.START, startTileData[i]);\r\n        startTiles[i].getComponent(\"mapTile\").setPlayerIcon(playerIcons[i]);\r\n      }\r\n    },\r\n\r\n    createEmptyMap(playerNum, playerIcons) {\r\n      this.__setMapSize(playerNum);\r\n      \r\n      const rangeX = { start: - Math.floor(this._mapWidth / 2), end: Math.floor(this._mapWidth / 2)};\r\n      const rangeY = { start: - Math.floor(this._mapHeight / 2), end: Math.floor(this._mapHeight / 2)};\r\n      let activeTileX = 0;\r\n      let addX = 1;\r\n      for (let i = rangeX.start; i <= rangeX.end; i++) {\r\n        for (let j = rangeY.start; j <= rangeY.end; j++) {\r\n          const tile = cc.instantiate(this.mapTile);\r\n          const size = tile.getContentSize();\r\n          tile.position = cc.p(j * size.width, i * size.height);\r\n          tile.active = j >= -activeTileX && j <= activeTileX;\r\n          this.node.addChild(tile);\r\n        }\r\n        addX *= (i == 0 ? -1 : 1);\r\n        activeTileX += addX;\r\n      }\r\n\r\n      this.__setStartMap(playerNum,playerIcons);\r\n    },\r\n\r\n    onLoad () {\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","class MarketingCardManager {\r\n  constructor() {\r\n    this._deck = null;\r\n    this._marketingCardData = null;\r\n  }\r\n\r\n  _shuffle(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const n = Math.floor(cc.random0To1() * (i + 1));\r\n      const tmp = array[i];\r\n      array[i] = array[n];\r\n      array[n] = tmp;\r\n    }\r\n  }\r\n\r\n  load(data) {\r\n    this._marketingCardData = data;\r\n    this._deck = this._marketingCardData.slice(0, this._marketingCardData.length);\r\n    this._shuffle(this._deck);\r\n  }\r\n\r\n  drawCard() {\r\n    return this._deck.pop();\r\n  }\r\n\r\n  mixDeckCard(card) {\r\n    this._deck.push(card);\r\n  }\r\n\r\n  shuffleDeck() {\r\n    this._shuffle(this._deck);\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  MarketingCardManager: MarketingCardManager,\r\n};","const PLAYER_DETAIL_WINDOW_ANIM_TIME = 0.2;\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n    },\n\n    open() {\n      this.node.active = true;\n      this.node.runAction(cc.scaleTo(PLAYER_DETAIL_WINDOW_ANIM_TIME, 1.0));\n    },\n\n    close(callback) {\n      this.node.runAction(cc.sequence(\n        cc.scaleTo(PLAYER_DETAIL_WINDOW_ANIM_TIME, 0),\n        cc.callFunc(() => {\n          this.node.active = false;\n          if (callback) {\n            callback();\n          }\n        })\n      ));\n    },\n\n    // onLoad () {},\n\n    start () {\n\n    },\n\n    // update (dt) {},\n});\n","class Player {\r\n  constructor(name, isOwn) {\r\n    this._name = name;\r\n    this._isOwn = isOwn;\r\n    this._point = 0;\r\n    this._foodHands = [];\r\n    this._specialHands = [];\r\n    this._cutomers = [];\r\n  }\r\n\r\n  get name() {\r\n    return this._name;\r\n  }\r\n  \r\n  get isOwn() {\r\n    return this._isOwn;\r\n  }\r\n\r\n  __addPoint(point) {\r\n    this._point += point;\r\n  }\r\n\r\n  get point() {\r\n    return this._point;\r\n  }\r\n\r\n  addCustomer(customer) {\r\n    this._cutomers.push(customer);\r\n  }\r\n\r\n  get customers() {\r\n    return this._cutomers;\r\n  }\r\n\r\n  addFoodHand(food) {\r\n    this._foodHands.push(food);\r\n  }\r\n\r\n  get foodHands() {\r\n    return this._foodHands;\r\n  }\r\n\r\n  addSpecialHand(special) {\r\n    this._specialHands.push(special);\r\n  }\r\n\r\n  get specialHands() {\r\n    return this._specialHands;\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  Player: Player,\r\n};"],"sourceRoot":"/source/","file":"project.js"}