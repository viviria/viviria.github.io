{"version":3,"sources":["assets/scripts/modules/customerCardManager.js","assets/scripts/modules/food.js","assets/scripts/modules/gameManager.js","assets/scripts/game.js","assets/scripts/modules/mapTIleManager.js","assets/scripts/modules/mapTile.js","assets/scripts/map.js","assets/scripts/modules/marketingCardManager.js","assets/scripts/modules/playerDetailWindow.js","assets/scripts/modules/player.js"],"names":["CustomerCardManager","_classCallCheck","this","_deck","_customerCardData","value","array","i","length","n","Math","floor","cc","random0To1","tmp","data","slice","_shuffle","pop","card","push","module","exports","FoodType","Enum","MEET","VEGETABLE","DRINK","FRUIT","SPECIAL","SpecialFoodType","SEKIRYU","Food","foodType","specialFoodType","_foodType","_specialFoodType","get","Player","require","GameManager","playerNum","playerNames","_players","_turnPlayerIndex","num","p","log","MapTileManager","MarketingCardManager","GameState","PLAYING","PLAYER_DETAIL_WINDOW","LeftWindowState","OTHER_PLAYER_WINDOW","CUSTOMER_WINDOW","ACTION_WINDOW","PLAYER_NAMES","Class","extends","Component","properties","customersAtlas","default","type","SpriteAtlas","_isLoadEnd","_playerNum","_gameState","_LeftWindowState","_gameManager","_mapTileManager","_customerCardManager","_marketingCardManager","onTapClosePlayerDetailWindow","_this","node","getChildByName","getComponent","close","onTapShowPlayerDetailWindow","window","active","open","onTapChangeLeftWindow","otherPlayersWindow","customersWindow","actionsWindow","updatePlayerDetail","players","getPlayers","player","name","point","foodHands","specialHands","playerWindow","isOwn","Label","string","openCustomerSetting","customers","getChildren","customer","drawCard","Sprite","spriteFrame","getSpriteFrame","image","touchSetting","on","Node","EventType","TOUCH_START","event","getLocation","TOUCH_MOVE","TOUCH_END","init","director","getCollisionManager","enabled","onLoad","_this2","loader","load","url","raw","error","gameInit","showPlayer","playerIcons","playerIcon","map","setMapTileManager","createEmptyMap","start","update","dt","IconType","MEAT","FRUITS","ALL","START","EMPTY","REVERSE","_startMapTile","_mapTileData","filter","x","tile","IconNames","MapTileManagerModule","mapTileAtlas","_type","_playerIcon","setMapTile","iconType","edges","joins","join","setPlayerIcon","removeFromParent","addChild","position","removePlayerIcon","removeChild","mapTile","Prefab","_mapWidth","_mapHeight","manager","__setMapSize","__setStartMap","startTiles","y","startTileData","rangeX","end","rangeY","activeTileX","addX","j","instantiate","size","getContentSize","width","height","_marketingCardData","runAction","scaleTo","callback","sequence","callFunc","_name","_isOwn","_point","_foodHands","_specialHands","_cutomers","food","special"],"mappings":"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","sourcesContent":["class CustomerCardManager {\r\n  constructor() {\r\n    this._deck = null;\r\n    this._customerCardData = null;\r\n  }\r\n\r\n  _shuffle(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const n = Math.floor(cc.random0To1() * (i + 1));\r\n      const tmp = array[i];\r\n      array[i] = array[n];\r\n      array[n] = tmp;\r\n    }\r\n  }\r\n\r\n  load(data) {\r\n    this._customerCardData = data;\r\n    this._deck = this._customerCardData.slice(0, this._customerCardData.length);\r\n    this._shuffle(this._deck);\r\n  }\r\n\r\n  drawCard() {\r\n    return this._deck.pop();\r\n  }\r\n\r\n  mixDeckCard(card) {\r\n    this._deck.push(card);\r\n  }\r\n\r\n  shuffleDeck() {\r\n    this._shuffle(this._deck);\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  CustomerCardManager: CustomerCardManager,\r\n};","const FoodType = cc.Enum({\r\n  MEET: 0,\r\n  VEGETABLE: 1,\r\n  DRINK: 2,\r\n  FRUIT: 3,\r\n  SPECIAL: 4,\r\n});\r\n\r\nconst SpecialFoodType = cc.Enum({\r\n  SEKIRYU: 0,\r\n});\r\n\r\nclass Food {\r\n  constructor(foodType, specialFoodType) {\r\n    this._foodType = foodType;\r\n    this._specialFoodType = specialFoodType;\r\n  }\r\n\r\n  get type() {\r\n    return this._foodType;\r\n  }\r\n\r\n  get specialFoodType() {\r\n    return this._specialFoodType;\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  Food: Food,\r\n  FoodType: FoodType,\r\n  SpecialFoodType: SpecialFoodType,\r\n};","const Player = require(\"player\").Player;\r\n\r\nconst OWN_NAME = \"hiro\";\r\n\r\nclass GameManager {\r\n  constructor(playerNum, playerNames) {\r\n    this._players = [];\r\n    this._turnPlayerIndex = 0;\r\n\r\n    const num = playerNum > playerNames.length ? playerNames.length : playerNum;\r\n    for (let i = 0; i < num; i++) {\r\n      const p = new Player(playerNames[i], playerNames[i] == OWN_NAME);\r\n      this._players.push(p);\r\n    }\r\n\r\n    // TODO: カードとタイルのロード\r\n  }\r\n  \r\n  getPlayers() {\r\n    return this._players;\r\n  }\r\n\r\n  init() {\r\n    // テスト中はターンプレイヤを固定しておく\r\n    // this._turnPlayerIndex = Math.floor(cc.random0To1() * this._players.length);\r\n\r\n    // TODO: 手番差ハンデの実装\r\n\r\n  }\r\n\r\n  cleanUp() {\r\n    // 次のターンプレイヤへ\r\n    this._turnPlayerIndex = (this._turnPlayerIndex + 1) % this._players.length;\r\n  }\r\n\r\n  getTurnPlayer() {\r\n    return this._players[this._turnPlayerIndex];\r\n  }\r\n\r\n  showPlayer() {\r\n    for (let i = 0; i < this._players.length; i++) {\r\n      cc.log(this._players[i]);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  GameManager: GameManager,\r\n};","const GameManager = require(\"./modules/gameManager\").GameManager;\r\nconst MapTileManager = require(\"./modules/mapTIleManager\").MapTileManager;\r\nconst CustomerCardManager = require(\"./modules/customerCardManager\").CustomerCardManager;\r\nconst MarketingCardManager = require(\"./modules/marketingCardManager\").MarketingCardManager;\r\n\r\nconst GameState = cc.Enum({\r\n  PLAYING: 0,\r\n  PLAYER_DETAIL_WINDOW: 1,\r\n});\r\n\r\nconst LeftWindowState = cc.Enum({\r\n  OTHER_PLAYER_WINDOW: 0,\r\n  CUSTOMER_WINDOW: 1,\r\n  ACTION_WINDOW: 2,\r\n});\r\n\r\nconst PLAYER_NAMES = [\"hiro\", \"aya\", \"shino\", \"yomo\"];\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n      customersAtlas: {\r\n        default: null,\r\n        type: cc.SpriteAtlas\r\n      },\r\n\r\n      _isLoadEnd: false,\r\n\r\n      _playerNum: 0,\r\n      _gameState: GameState.PLAYING,\r\n      _LeftWindowState: LeftWindowState.OTHER_PLAYER_WINDOW,\r\n\r\n      _gameManager: null,\r\n      _mapTileManager: null,\r\n      _customerCardManager: null,\r\n      _marketingCardManager: null,\r\n    },\r\n\r\n    onTapClosePlayerDetailWindow() {\r\n      if (this._gameState != GameState.PLAYER_DETAIL_WINDOW) {\r\n        return;\r\n      }\r\n\r\n      const window = this.node.getChildByName(\"playerDetailWindow\");\r\n      window.getComponent(\"playerDetailWindow\").close(() => {\r\n        this._gameState = GameState.PLAYING;\r\n      });\r\n    },\r\n\r\n    onTapShowPlayerDetailWindow() {\r\n      const window = this.node.getChildByName(\"playerDetailWindow\");\r\n      if (window.active || this._gameState != GameState.PLAYING) {\r\n        return;\r\n      }\r\n\r\n      this._gameState = GameState.PLAYER_DETAIL_WINDOW;\r\n      window.getComponent(\"playerDetailWindow\").open();\r\n    },\r\n\r\n    onTapChangeLeftWindow() {\r\n      const otherPlayersWindow = this.node.getChildByName(\"otherPlayersWindow\");\r\n      const customersWindow = this.node.getChildByName(\"customersWindow\");\r\n      const actionsWindow = this.node.getChildByName(\"actionsWindow\");\r\n\r\n      otherPlayersWindow.active = false;\r\n      customersWindow.active = false;\r\n      actionsWindow.active = false;\r\n\r\n      switch (this._LeftWindowState) {\r\n        case LeftWindowState.OTHER_PLAYER_WINDOW:\r\n          customersWindow.active = true;\r\n          this._LeftWindowState = LeftWindowState.CUSTOMER_WINDOW;\r\n          break;\r\n        case LeftWindowState.CUSTOMER_WINDOW:\r\n          actionsWindow.active = true;\r\n          this._LeftWindowState = LeftWindowState.ACTION_WINDOW;\r\n          break;\r\n        case LeftWindowState.ACTION_WINDOW:\r\n          otherPlayersWindow.active = true;\r\n          this._LeftWindowState = LeftWindowState.OTHER_PLAYER_WINDOW;\r\n          break;\r\n      }\r\n\r\n      // TODO: ウィンドウズ切り替えアニメーションを実装\r\n    },\r\n\r\n    // プレイヤの詳細を更新\r\n    updatePlayerDetail() {\r\n      const players = this._gameManager.getPlayers();\r\n      for (let i = 0; i < players.length; i++) {\r\n        const player = players[i];\r\n        const name = player.name;\r\n        const point = player.point;\r\n        const foodHands = player.foodHands;\r\n        const specialHands = player.specialHands;\r\n\r\n        const otherPlayersWindow = this.node.getChildByName(\"otherPlayersWindow\");\r\n        const playerWindow = otherPlayersWindow.getChildByName(name);\r\n\r\n        if (player.isOwn) {\r\n          const pointLabel = this.node.getChildByName(\"pointLabel\").getComponent(cc.Label);\r\n          pointLabel.string = point + \" pt\";\r\n        } else if (playerWindow) {\r\n          const pointLabel = playerWindow.getChildByName(\"pointLabel\").getComponent(cc.Label);\r\n          pointLabel.string = point + \" pt\";\r\n          const handNumLabel = playerWindow.getChildByName(\"handNumLabel\").getComponent(cc.Label);\r\n          handNumLabel.string = \"×\" + foodHands.length;\r\n          const marketingHandNumLabel = playerWindow.getChildByName(\"marketingHandNumLabel\").getComponent(cc.Label);\r\n          marketingHandNumLabel.string = \"×\" + specialHands.length;\r\n        }\r\n      }\r\n    },\r\n\r\n    // お客さんカードを配置\r\n    openCustomerSetting() {\r\n      const customers = this.node.getChildByName(\"customersWindow\").getChildByName(\"customers\").getChildren();\r\n      for (let i = 0; i < customers.length; i++) {\r\n        if (i < this._playerNum + 1) {\r\n          customers[i].active = true;\r\n          const customer = this._customerCardManager.drawCard();\r\n          customers[i].getComponent(cc.Sprite).spriteFrame = this.customersAtlas.getSpriteFrame(customer.image);\r\n          cc.log(customer.image);\r\n        } else {\r\n          customers[i].active = false;\r\n        }\r\n      }\r\n    },\r\n\r\n    touchSetting() {\r\n      this.node.on(cc.Node.EventType.TOUCH_START, (event) => {\r\n        const point = event.getLocation();\r\n      });\r\n\r\n      this.node.on(cc.Node.EventType.TOUCH_MOVE, (event) => {\r\n        const point = event.getLocation();\r\n      });\r\n\r\n      this.node.on(cc.Node.EventType.TOUCH_END, (event) => {\r\n      });\r\n    },\r\n\r\n    init() {\r\n      cc.director.getCollisionManager().enabled = true;\r\n\r\n      this._isLoadEnd = false;\r\n      this._playerNum = 4;\r\n      \r\n      this._gameManager = new GameManager(this._playerNum, PLAYER_NAMES);\r\n      this._mapTileManager = new MapTileManager();\r\n      this._customerCardManager = new CustomerCardManager();\r\n      this._marketingCardManager = new MarketingCardManager();\r\n    },\r\n\r\n    onLoad () {\r\n      this.init();\r\n      \r\n      cc.loader.load(cc.url.raw(\"resources/json/mapTile.json\"), (error, data) => {\r\n        if (error !== null) return;\r\n        this._mapTileManager.load(data);\r\n        cc.loader.load(cc.url.raw(\"resources/json/customer.json\"), (error, data) => {\r\n          if (error !== null) return;\r\n          this._customerCardManager.load(data);\r\n          cc.loader.load(cc.url.raw(\"resources/json/market.json\"), (error, data) => {\r\n            if (error !== null) return;\r\n            this._marketingCardManager.load(data);\r\n            this._isLoadEnd = true;\r\n          });\r\n        });\r\n      });\r\n    },\r\n\r\n    gameInit() {\r\n      this._gameManager.showPlayer();\r\n      this._gameManager.init();\r\n\r\n      this.updatePlayerDetail();\r\n\r\n      const playerIcons = [];\r\n      for (let i = 0; i < PLAYER_NAMES.length; i++) {\r\n        const playerIcon = this.node.getChildByName(PLAYER_NAMES[i]);\r\n        if (i < this._playerNum) {\r\n          playerIcons.push(playerIcon);\r\n        } else {\r\n          playerIcon.active = false;\r\n        }\r\n      }\r\n\r\n      const map = this.node.getChildByName(\"map\");\r\n      map.getComponent(\"map\").setMapTileManager(this._mapTileManager);\r\n      map.getComponent(\"map\").createEmptyMap(this._playerNum, playerIcons);\r\n\r\n      this.openCustomerSetting();\r\n\r\n      this.touchSetting();\r\n    },\r\n\r\n    start () {},\r\n\r\n    update (dt) {\r\n      if (this._isLoadEnd) {\r\n        this.gameInit();\r\n        this._isLoadEnd = false;\r\n      }\r\n    },\r\n});\r\n","const IconType = cc.Enum({\r\n  MEAT: 0,\r\n  VEGETABLE: 1,\r\n  DRINK: 2,\r\n  FRUITS: 3,\r\n  SPECIAL: 4,\r\n  ALL: 5,\r\n  START: 6,\r\n  EMPTY: 7,\r\n  REVERSE: 8,\r\n});\r\n\r\nconst IconNames = [\r\n  \"meat\",\r\n  \"vegetable\",\r\n  \"drink\",\r\n  \"fruits\",\r\n  \"special\",\r\n  \"all\",\r\n  \"start\",\r\n  \"empty\",\r\n  \"reverse\",\r\n]\r\n\r\nclass MapTileManager {\r\n  constructor() {\r\n    this._deck = null;\r\n    this._startMapTile = null;\r\n    this._mapTileData = null;\r\n  }\r\n\r\n  _shuffle(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const n = Math.floor(cc.random0To1() * (i + 1));\r\n      const tmp = array[i];\r\n      array[i] = array[n];\r\n      array[n] = tmp;\r\n    }\r\n  }\r\n\r\n  load(data) {\r\n    this._mapTileData = data;\r\n    this._deck = this._mapTileData.filter(x => x.type !== IconType.START);\r\n    this._startMapTile = this._mapTileData.filter(x => x.type == IconType.START);\r\n    this._shuffle(this._deck);\r\n    this._shuffle(this._startMapTile);\r\n  }\r\n\r\n  get startTiles() {\r\n    return this._startMapTile;\r\n  }\r\n\r\n  get drawTile() {\r\n    return this._deck.pop();\r\n  }\r\n\r\n  mixDeckTile(tile) {\r\n    this._deck.push(tile);\r\n    this._shuffle(this._deck);\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  IconType: IconType,\r\n  IconNames: IconNames,\r\n  MapTileManager: MapTileManager,\r\n}","const MapTileManagerModule = require(\"./mapTIleManager\");\r\nconst IconType = MapTileManagerModule.IconType;\r\nconst IconNames = MapTileManagerModule.IconNames;\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n      mapTileAtlas: {\r\n        default: null,\r\n        type: cc.SpriteAtlas\r\n      },\r\n\r\n      _type: IconType.EMPTY,\r\n      _playerIcon: null,\r\n    },\r\n\r\n    setMapTile(iconType, data) {\r\n      this._type = iconType;\r\n      const icon = this.node.getChildByName(\"icon\");\r\n      icon.getComponent(cc.Sprite).spriteFrame = this.mapTileAtlas.getSpriteFrame(IconNames[this._type]);\r\n      const edges = this.node.getChildByName(\"edges\").getChildren();\r\n      const joins = data.join;\r\n      for (let i = 0; i < edges.length; i++) {\r\n        edges[i].getComponent(cc.Sprite).spriteFrame = this.mapTileAtlas.getSpriteFrame(\"edge\" + joins[i]);\r\n      }\r\n    },\r\n\r\n    setPlayerIcon(playerIcon) {\r\n      this._playerIcon = playerIcon;\r\n      this._playerIcon.removeFromParent();\r\n      this.node.addChild(this._playerIcon);\r\n      this._playerIcon.position = cc.p(-30, 30);\r\n    },\r\n\r\n    removePlayerIcon() {\r\n      this.node.removeChild(this._playerIcon);\r\n      const tmp = this._playerIcon;\r\n      this._playerIcon = null;\r\n      return tmp;\r\n    },\r\n\r\n    // onLoad () {},\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","const MapTileManagerModule = require(\"./modules/mapTIleManager\");\r\nconst IconType = MapTileManagerModule.IconType;\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n      mapTile : {\r\n        default: null,\r\n        type: cc.Prefab\r\n      },\r\n\r\n      _mapTileManager: null,\r\n\r\n      _mapWidth: 0,\r\n      _mapHeight: 0,\r\n    },\r\n\r\n    setMapTileManager(manager) {\r\n      this._mapTileManager = manager;\r\n    },\r\n\r\n    __setMapSize(playerNum) {\r\n      switch (playerNum) {\r\n        case 2:\r\n          this._mapWidth = 5;\r\n          this._mapHeight = 5;\r\n          break;\r\n        case 3:\r\n        case 4:\r\n          this._mapWidth = 7;\r\n          this._mapHeight = 7;\r\n          break;\r\n      }\r\n    },\r\n\r\n    __setStartMap(playerNum, playerIcons) {\r\n      const tiles = this.node.getChildren();\r\n      const startTiles = tiles.filter((n, i) => {\r\n        const x = i % this._mapWidth;\r\n        const y = Math.floor(i / this._mapWidth);\r\n        if (playerNum < 3) {\r\n          return n.active && (y == 0 || y == this._mapHeight - 1);\r\n        } else {\r\n          return n.active && (y == 0 || y == this._mapHeight - 1 || x == 0 || x == this._mapWidth - 1);\r\n        }\r\n      });\r\n\r\n      const startTileData = this._mapTileManager.startTiles;\r\n\r\n      for (let i = 0; i < startTiles.length; i++) {\r\n        startTiles[i].getComponent(\"mapTile\").setMapTile(IconType.START, startTileData[i]);\r\n        startTiles[i].getComponent(\"mapTile\").setPlayerIcon(playerIcons[i]);\r\n      }\r\n    },\r\n\r\n    createEmptyMap(playerNum, playerIcons) {\r\n      this.__setMapSize(playerNum);\r\n      \r\n      const rangeX = { start: - Math.floor(this._mapWidth / 2), end: Math.floor(this._mapWidth / 2)};\r\n      const rangeY = { start: - Math.floor(this._mapHeight / 2), end: Math.floor(this._mapHeight / 2)};\r\n      let activeTileX = 0;\r\n      let addX = 1;\r\n      for (let i = rangeX.start; i <= rangeX.end; i++) {\r\n        for (let j = rangeY.start; j <= rangeY.end; j++) {\r\n          const tile = cc.instantiate(this.mapTile);\r\n          const size = tile.getContentSize();\r\n          tile.position = cc.p(j * size.width, i * size.height);\r\n          tile.active = j >= -activeTileX && j <= activeTileX;\r\n          this.node.addChild(tile);\r\n        }\r\n        addX *= (i == 0 ? -1 : 1);\r\n        activeTileX += addX;\r\n      }\r\n\r\n      this.__setStartMap(playerNum,playerIcons);\r\n    },\r\n\r\n    onLoad () {\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","class MarketingCardManager {\r\n  constructor() {\r\n    this._deck = null;\r\n    this._marketingCardData = null;\r\n  }\r\n\r\n  _shuffle(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const n = Math.floor(cc.random0To1() * (i + 1));\r\n      const tmp = array[i];\r\n      array[i] = array[n];\r\n      array[n] = tmp;\r\n    }\r\n  }\r\n\r\n  load(data) {\r\n    this._marketingCardData = data;\r\n    this._deck = this._marketingCardData.slice(0, this._marketingCardData.length);\r\n    this._shuffle(this._deck);\r\n  }\r\n\r\n  drawCard() {\r\n    return this._deck.pop();\r\n  }\r\n\r\n  mixDeckCard(card) {\r\n    this._deck.push(card);\r\n  }\r\n\r\n  shuffleDeck() {\r\n    this._shuffle(this._deck);\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  MarketingCardManager: MarketingCardManager,\r\n};","const PLAYER_DETAIL_WINDOW_ANIM_TIME = 0.2;\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n    },\n\n    open() {\n      this.node.active = true;\n      this.node.runAction(cc.scaleTo(PLAYER_DETAIL_WINDOW_ANIM_TIME, 1.0));\n    },\n\n    close(callback) {\n      this.node.runAction(cc.sequence(\n        cc.scaleTo(PLAYER_DETAIL_WINDOW_ANIM_TIME, 0),\n        cc.callFunc(() => {\n          this.node.active = false;\n          if (callback) {\n            callback();\n          }\n        })\n      ));\n    },\n\n    // onLoad () {},\n\n    start () {\n\n    },\n\n    // update (dt) {},\n});\n","class Player {\r\n  constructor(name, isOwn) {\r\n    this._name = name;\r\n    this._isOwn = isOwn;\r\n    this._point = 0;\r\n    this._foodHands = [];\r\n    this._specialHands = [];\r\n    this._cutomers = [];\r\n  }\r\n\r\n  get name() {\r\n    return this._name;\r\n  }\r\n  \r\n  get isOwn() {\r\n    return this._isOwn;\r\n  }\r\n\r\n  __addPoint(point) {\r\n    this._point += point;\r\n  }\r\n\r\n  get point() {\r\n    return this._point;\r\n  }\r\n\r\n  addCustomer(customer) {\r\n    this._cutomers.push(customer);\r\n  }\r\n\r\n  get customers() {\r\n    return this._cutomers;\r\n  }\r\n\r\n  addFoodHand(food) {\r\n    this._foodHands.push(food);\r\n  }\r\n\r\n  get foodHands() {\r\n    return this._foodHands;\r\n  }\r\n\r\n  addSpecialHand(special) {\r\n    this._specialHands.push(special);\r\n  }\r\n\r\n  get specialHands() {\r\n    return this._specialHands;\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  Player: Player,\r\n};"],"sourceRoot":"/source/","file":"project.js"}