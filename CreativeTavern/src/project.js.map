{"version":3,"sources":["assets/scripts/game.js","assets/scripts/mapTile.js","assets/scripts/map.js","assets/scripts/player.js"],"names":["GameState","cc","Enum","PLAYING","PLAYER_DETAIL_WINDOW","PLAYER_HAND_WINDOW","PLAYER_NAMES","Class","extends","Component","properties","_playerNum","_gameState","onTapClosePlayerDetailWindow","_this","this","playerDetailWindow","node","getChildByName","runAction","sequence","scaleTo","callFunc","active","onTapShowPlayerDetailWindow","onTapShowPlayerHandWindow","playerHandWindow","spawn","moveTo","p","onTapClosePlayeHandWindow","_this2","touchSetting","on","Node","EventType","TOUCH_START","event","getLocation","TOUCH_MOVE","TOUCH_END","onLoad","director","getCollisionManager","enabled","playerIcons","i","length","playetIcon","push","getComponent","createEmptyMap","start","IconType","EMPTY","MEAT","VEGETABLE","DRINK","FRUITS","ALL","SPECIAL","START","iconsAtlas","default","type","SpriteAtlas","_type","_playerIcon","setMapTile","iconType","Sprite","spriteFrame","getSpriteFrame","setPlayerIcon","playerIcon","removeFromParent","addChild","position","removePlayerIcon","removeChild","tmp","module","exports","require","mapTile","Prefab","_mapWidth","_mapHeight","__setMapSize","playerNum","__setStartMap","startTiles","getChildren","filter","n","x","y","Math","floor","rangeX","end","rangeY","activeTileX","addX","j","tile","instantiate","size","getContentSize","width","height","Player","_classCallCheck","_point","_foodHands","_specialHands","_cutomers","value","point","customer","food","special","get"],"mappings":"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","sourcesContent":["const PLAYER_DETAIL_WINDOW_ANIM_TIME = 0.2;\r\nconst PLAYER_HAND_WINDOW_ANIM_TIME = 0.2;\r\n\r\nconst GameState = cc.Enum({\r\n  PLAYING: 0,\r\n  PLAYER_DETAIL_WINDOW: 1,\r\n  PLAYER_HAND_WINDOW: 2,\r\n});\r\n\r\nconst PLAYER_NAMES = [\"hiro\", \"aya\", \"shino\", \"yomo\"];\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n      _playerNum: 0,\r\n      _gameState: GameState.PLAYING,\r\n    },\r\n\r\n    onTapClosePlayerDetailWindow() {\r\n      if (this._gameState != GameState.PLAYER_DETAIL_WINDOW) {\r\n        return;\r\n      }\r\n\r\n      const playerDetailWindow = this.node.getChildByName(\"playerDetailWindow\");\r\n      playerDetailWindow.runAction(cc.sequence(\r\n        cc.scaleTo(PLAYER_DETAIL_WINDOW_ANIM_TIME, 0),\r\n        cc.callFunc(() => {\r\n          playerDetailWindow.active = false;\r\n          this._gameState = GameState.PLAYING;\r\n        })\r\n      ));\r\n    },\r\n\r\n    onTapShowPlayerDetailWindow() {\r\n      const playerDetailWindow = this.node.getChildByName(\"playerDetailWindow\");\r\n      if (playerDetailWindow.active || this._gameState != GameState.PLAYING) {\r\n        return;\r\n      }\r\n\r\n      this._gameState = GameState.PLAYER_DETAIL_WINDOW;\r\n      playerDetailWindow.active = true;\r\n      playerDetailWindow.runAction(cc.scaleTo(PLAYER_DETAIL_WINDOW_ANIM_TIME, 1.0));\r\n    },\r\n\r\n    onTapShowPlayerHandWindow() {\r\n      const playerHandWindow = this.node.getChildByName(\"playerHandWindow\");\r\n      if (playerHandWindow.active || this._gameState != GameState.PLAYING) {\r\n        return;\r\n      }\r\n\r\n      this._gameState = GameState.PLAYER_HAND_WINDOW;\r\n      playerHandWindow.active = true;\r\n      playerHandWindow.runAction(cc.spawn(\r\n        cc.scaleTo(PLAYER_HAND_WINDOW_ANIM_TIME, 1.0),\r\n        cc.moveTo(PLAYER_HAND_WINDOW_ANIM_TIME, cc.p(0, -60))\r\n      ));\r\n    },\r\n\r\n    onTapClosePlayeHandWindow() {\r\n      if (this._gameState != GameState.PLAYER_HAND_WINDOW) {\r\n        return;\r\n      }\r\n\r\n      const playerHandWindow = this.node.getChildByName(\"playerHandWindow\");\r\n      playerHandWindow.runAction(cc.sequence(\r\n        cc.spawn(cc.scaleTo(PLAYER_HAND_WINDOW_ANIM_TIME, 0), cc.moveTo(PLAYER_HAND_WINDOW_ANIM_TIME, cc.p(340, -700))),\r\n        cc.callFunc(() => {\r\n          playerHandWindow.active = false;\r\n          this._gameState = GameState.PLAYING;\r\n        })\r\n      ));\r\n    },\r\n\r\n    touchSetting() {\r\n      this.node.on(cc.Node.EventType.TOUCH_START, (event) => {\r\n        const point = event.getLocation();\r\n      });\r\n\r\n      this.node.on(cc.Node.EventType.TOUCH_MOVE, (event) => {\r\n        const point = event.getLocation();\r\n      });\r\n\r\n      this.node.on(cc.Node.EventType.TOUCH_END, (event) => {\r\n      });\r\n    },\r\n\r\n    onLoad () {\r\n      cc.director.getCollisionManager().enabled = true;\r\n\r\n      this._playerNum = 4;\r\n\r\n      const playerIcons = [];\r\n      for (let i = 0; i < PLAYER_NAMES.length; i++) {\r\n        const playetIcon = this.node.getChildByName(PLAYER_NAMES[i]);\r\n        if (i < this._playerNum) {\r\n          playerIcons.push(playetIcon);\r\n        } else {\r\n          playetIcon.active = false;\r\n        }\r\n      }\r\n\r\n      const map = this.node.getChildByName(\"map\");\r\n      map.getComponent(\"map\").createEmptyMap(this._playerNum, playerIcons);\r\n\r\n      this.touchSetting();\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","const IconType = cc.Enum({\r\n  EMPTY: \"empty\",\r\n  MEAT: \"meat\",\r\n  VEGETABLE: \"vegetable\",\r\n  DRINK: \"drink\",\r\n  FRUITS: \"fruits\",\r\n  ALL: \"all\",\r\n  SPECIAL: \"special\",\r\n  START: \"start\",\r\n});\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n      iconsAtlas: {\r\n        default: null,\r\n        type: cc.SpriteAtlas\r\n      },\r\n\r\n      _type: IconType.EMPTY,\r\n      _playerIcon: null,\r\n    },\r\n\r\n    setMapTile(iconType) {\r\n      this._type = iconType;\r\n      const icon = this.node.getChildByName(\"icon\");\r\n      icon.getComponent(cc.Sprite).spriteFrame = this.iconsAtlas.getSpriteFrame(this._type);\r\n    },\r\n\r\n    setPlayerIcon(playerIcon) {\r\n      this._playerIcon = playerIcon;\r\n      this._playerIcon.removeFromParent();\r\n      this.node.addChild(this._playerIcon);\r\n      this._playerIcon.position = cc.p(-30, 30);\r\n    },\r\n\r\n    removePlayerIcon() {\r\n      this.node.removeChild(this._playerIcon);\r\n      const tmp = this._playerIcon;\r\n      this._playerIcon = null;\r\n      return tmp;\r\n    },\r\n\r\n    // onLoad () {},\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n\r\nmodule.exports = {\r\n  IconType: IconType,\r\n};","const IconType = require(\"./mapTile\").IconType;\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n      mapTile : {\r\n        default: null,\r\n        type: cc.Prefab\r\n      },\r\n\r\n      _mapWidth: 0,\r\n      _mapHeight: 0,\r\n    },\r\n\r\n    __setMapSize(playerNum) {\r\n      switch (playerNum) {\r\n        case 2:\r\n          this._mapWidth = 5;\r\n          this._mapHeight = 5;\r\n          break;\r\n        case 3:\r\n        case 4:\r\n          this._mapWidth = 7;\r\n          this._mapHeight = 7;\r\n          break;\r\n      }\r\n    },\r\n\r\n    __setStartMap(playerNum, playerIcons) {\r\n      const tiles = this.node.getChildren();\r\n      const startTiles = tiles.filter((n, i) => {\r\n        const x = i % this._mapWidth;\r\n        const y = Math.floor(i / this._mapWidth);\r\n        if (playerNum < 3) {\r\n          return n.active && (y == 0 || y == this._mapHeight - 1);\r\n        } else {\r\n          return n.active && (y == 0 || y == this._mapHeight - 1 || x == 0 || x == this._mapWidth - 1);\r\n        }\r\n      });\r\n      for (let i = 0; i < startTiles.length; i++) {\r\n        startTiles[i].getComponent(\"mapTile\").setMapTile(IconType.START);\r\n        startTiles[i].getComponent(\"mapTile\").setPlayerIcon(playerIcons[i]);\r\n      }\r\n    },\r\n\r\n    createEmptyMap(playerNum, playerIcons) {\r\n      this.__setMapSize(playerNum);\r\n      \r\n      const rangeX = { start: - Math.floor(this._mapWidth / 2), end: Math.floor(this._mapWidth / 2)};\r\n      const rangeY = { start: - Math.floor(this._mapHeight / 2), end: Math.floor(this._mapHeight / 2)};\r\n      let activeTileX = 0;\r\n      let addX = 1;\r\n      for (let i = rangeX.start; i <= rangeX.end; i++) {\r\n        for (let j = rangeY.start; j <= rangeY.end; j++) {\r\n          const tile = cc.instantiate(this.mapTile);\r\n          const size = tile.getContentSize();\r\n          tile.position = cc.p(j * size.width, i * size.height);\r\n          tile.active = j >= -activeTileX && j <= activeTileX;\r\n          this.node.addChild(tile);\r\n        }\r\n        addX *= (i == 0 ? -1 : 1);\r\n        activeTileX += addX;\r\n      }\r\n\r\n      this.__setStartMap(playerNum,playerIcons);\r\n    },\r\n\r\n    onLoad () {\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","class Player {\r\n  constructor() {\r\n    this._point = 0;\r\n    this._foodHands = [];\r\n    this._specialHands = [];\r\n    this._cutomers = [];\r\n  }\r\n\r\n  __addPoint(point) {\r\n    this._point += point;\r\n  }\r\n\r\n  get point() {\r\n    return this._point;\r\n  }\r\n\r\n  addCustomer(customer) {\r\n    this._cutomers.push(customer);\r\n  }\r\n\r\n  get customers() {\r\n    return this._cutomers;\r\n  }\r\n\r\n  addFoodHand(food) {\r\n    this._foodHands.push(food);\r\n  }\r\n\r\n  get foodHands() {\r\n    return this._foodHands;\r\n  }\r\n\r\n  addSpecialHand(special) {\r\n    this._specialHands.push(special);\r\n  }\r\n\r\n  get specialHands() {\r\n    return this._specialHands;\r\n  }\r\n};"],"sourceRoot":"/source/","file":"project.js"}