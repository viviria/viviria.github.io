{"version":3,"sources":["assets/scripts/modules/food.js","assets/scripts/modules/gameManager.js","assets/scripts/game.js","assets/scripts/modules/mapTIleManager.js","assets/scripts/modules/mapTile.js","assets/scripts/map.js","assets/scripts/modules/playerDetailWindow.js","assets/scripts/modules/player.js"],"names":["FoodType","cc","Enum","MEET","VEGETABLE","DRINK","FRUIT","SPECIAL","SpecialFoodType","SEKIRYU","Food","foodType","specialFoodType","_classCallCheck","this","_foodType","_specialFoodType","get","module","exports","Player","require","GameManager","playerNum","playerNames","_players","_turnPlayerIndex","num","length","i","p","push","value","log","MapTileManager","GameState","PLAYING","PLAYER_DETAIL_WINDOW","LeftWindowState","OTHER_PLAYER_WINDOW","CUSTOMER_WINDOW","ACTION_WINDOW","PLAYER_NAMES","Class","extends","Component","properties","_isLoadEnd","_playerNum","_gameState","_LeftWindowState","_gameManager","_mapTileManager","onTapClosePlayerDetailWindow","_this","node","getChildByName","getComponent","close","onTapShowPlayerDetailWindow","window","active","open","onTapChangeLeftWindow","otherPlayersWindow","customersWindow","actionsWindow","updatePlayerDetail","players","getPlayers","player","name","point","foodHands","specialHands","playerWindow","isOwn","Label","string","touchSetting","on","Node","EventType","TOUCH_START","event","getLocation","TOUCH_MOVE","TOUCH_END","init","director","getCollisionManager","enabled","onLoad","_this2","loader","load","url","raw","error","data","gameInit","showPlayer","playerIcons","playerIcon","map","setMapTileManager","createEmptyMap","start","update","dt","IconType","MEAT","FRUITS","ALL","START","EMPTY","REVERSE","_deck","_startMapTile","_mapTileData","array","n","Math","floor","random0To1","tmp","filter","x","_type","shuffle","IconNames","MapTileManagerModule","mapTileAtlas","default","type","SpriteAtlas","_playerIcon","setMapTile","iconType","Sprite","spriteFrame","getSpriteFrame","edges","getChildren","joins","_join","setPlayerIcon","removeFromParent","addChild","position","removePlayerIcon","removeChild","mapTile","Prefab","_mapWidth","_mapHeight","manager","__setMapSize","__setStartMap","startTiles","y","startTileData","rangeX","end","rangeY","activeTileX","addX","j","tile","instantiate","size","getContentSize","width","height","runAction","scaleTo","callback","sequence","callFunc","_name","_isOwn","_point","_foodHands","_specialHands","_cutomers","customer","food","special"],"mappings":"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","sourcesContent":["const FoodType = cc.Enum({\r\n  MEET: 0,\r\n  VEGETABLE: 1,\r\n  DRINK: 2,\r\n  FRUIT: 3,\r\n  SPECIAL: 4,\r\n});\r\n\r\nconst SpecialFoodType = cc.Enum({\r\n  SEKIRYU: 0,\r\n});\r\n\r\nclass Food {\r\n  constructor(foodType, specialFoodType) {\r\n    this._foodType = foodType;\r\n    this._specialFoodType = specialFoodType;\r\n  }\r\n\r\n  get type() {\r\n    return this._foodType;\r\n  }\r\n\r\n  get specialFoodType() {\r\n    return this._specialFoodType;\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  Food: Food,\r\n  FoodType: FoodType,\r\n  SpecialFoodType: SpecialFoodType,\r\n};","const Player = require(\"player\").Player;\r\n\r\nconst OWN_NAME = \"hiro\";\r\n\r\nclass GameManager {\r\n  constructor(playerNum, playerNames) {\r\n    this._players = [];\r\n    this._turnPlayerIndex = 0;\r\n\r\n    const num = playerNum > playerNames.length ? playerNames.length : playerNum;\r\n    for (let i = 0; i < num; i++) {\r\n      const p = new Player(playerNames[i], playerNames[i] == OWN_NAME);\r\n      this._players.push(p);\r\n    }\r\n\r\n    // TODO: カードとタイルのロード\r\n  }\r\n  \r\n  getPlayers() {\r\n    return this._players;\r\n  }\r\n\r\n  init() {\r\n    // テスト中はターンプレイヤを固定しておく\r\n    // this._turnPlayerIndex = Math.floor(cc.random0To1() * this._players.length);\r\n\r\n    // TODO: 手番差ハンデの実装\r\n\r\n  }\r\n\r\n  cleanUp() {\r\n    // 次のターンプレイヤへ\r\n    this._turnPlayerIndex = (this._turnPlayerIndex + 1) % this._players.length;\r\n  }\r\n\r\n  getTurnPlayer() {\r\n    return this._players[this._turnPlayerIndex];\r\n  }\r\n\r\n  showPlayer() {\r\n    for (let i = 0; i < this._players.length; i++) {\r\n      cc.log(this._players[i]);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  GameManager: GameManager,\r\n};","const GameManager = require(\"./modules/gameManager\").GameManager;\r\nconst MapTileManager = require(\"./modules/mapTIleManager\").MapTileManager;\r\n\r\nconst GameState = cc.Enum({\r\n  PLAYING: 0,\r\n  PLAYER_DETAIL_WINDOW: 1,\r\n});\r\n\r\nconst LeftWindowState = cc.Enum({\r\n  OTHER_PLAYER_WINDOW: 0,\r\n  CUSTOMER_WINDOW: 1,\r\n  ACTION_WINDOW: 2,\r\n});\r\n\r\nconst PLAYER_NAMES = [\"hiro\", \"aya\", \"shino\", \"yomo\"];\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n      _isLoadEnd: false,\r\n\r\n      _playerNum: 0,\r\n      _gameState: GameState.PLAYING,\r\n      _LeftWindowState: LeftWindowState.OTHER_PLAYER_WINDOW,\r\n\r\n      _gameManager: null,\r\n      _mapTileManager: null,\r\n    },\r\n\r\n    onTapClosePlayerDetailWindow() {\r\n      if (this._gameState != GameState.PLAYER_DETAIL_WINDOW) {\r\n        return;\r\n      }\r\n\r\n      const window = this.node.getChildByName(\"playerDetailWindow\");\r\n      window.getComponent(\"playerDetailWindow\").close(() => {\r\n        this._gameState = GameState.PLAYING;\r\n      });\r\n    },\r\n\r\n    onTapShowPlayerDetailWindow() {\r\n      const window = this.node.getChildByName(\"playerDetailWindow\");\r\n      if (window.active || this._gameState != GameState.PLAYING) {\r\n        return;\r\n      }\r\n\r\n      this._gameState = GameState.PLAYER_DETAIL_WINDOW;\r\n      window.getComponent(\"playerDetailWindow\").open();\r\n    },\r\n\r\n    onTapChangeLeftWindow() {\r\n      const otherPlayersWindow = this.node.getChildByName(\"otherPlayersWindow\");\r\n      const customersWindow = this.node.getChildByName(\"customersWindow\");\r\n      const actionsWindow = this.node.getChildByName(\"actionsWindow\");\r\n\r\n      otherPlayersWindow.active = false;\r\n      customersWindow.active = false;\r\n      actionsWindow.active = false;\r\n\r\n      switch (this._LeftWindowState) {\r\n        case LeftWindowState.OTHER_PLAYER_WINDOW:\r\n          customersWindow.active = true;\r\n          this._LeftWindowState = LeftWindowState.CUSTOMER_WINDOW;\r\n          break;\r\n        case LeftWindowState.CUSTOMER_WINDOW:\r\n          actionsWindow.active = true;\r\n          this._LeftWindowState = LeftWindowState.ACTION_WINDOW;\r\n          break;\r\n        case LeftWindowState.ACTION_WINDOW:\r\n          otherPlayersWindow.active = true;\r\n          this._LeftWindowState = LeftWindowState.OTHER_PLAYER_WINDOW;\r\n          break;\r\n      }\r\n\r\n      // TODO: ウィンドウズ切り替えアニメーションを実装\r\n    },\r\n\r\n    // プレイヤの詳細を更新\r\n    updatePlayerDetail() {\r\n      const players = this._gameManager.getPlayers();\r\n      for (let i = 0; i < players.length; i++) {\r\n        const player = players[i];\r\n        const name = player.name;\r\n        const point = player.point;\r\n        const foodHands = player.foodHands;\r\n        const specialHands = player.specialHands;\r\n\r\n        const otherPlayersWindow = this.node.getChildByName(\"otherPlayersWindow\");\r\n        const playerWindow = otherPlayersWindow.getChildByName(name);\r\n\r\n        if (player.isOwn) {\r\n          const pointLabel = this.node.getChildByName(\"pointLabel\").getComponent(cc.Label);\r\n          pointLabel.string = point + \" pt\";\r\n        } else if (playerWindow) {\r\n          const pointLabel = playerWindow.getChildByName(\"pointLabel\").getComponent(cc.Label);\r\n          pointLabel.string = point + \" pt\";\r\n          const handNumLabel = playerWindow.getChildByName(\"handNumLabel\").getComponent(cc.Label);\r\n          handNumLabel.string = \"×\" + foodHands.length;\r\n          const marketingHandNumLabel = playerWindow.getChildByName(\"marketingHandNumLabel\").getComponent(cc.Label);\r\n          marketingHandNumLabel.string = \"×\" + specialHands.length;\r\n        }\r\n      }\r\n    },\r\n\r\n    touchSetting() {\r\n      this.node.on(cc.Node.EventType.TOUCH_START, (event) => {\r\n        const point = event.getLocation();\r\n      });\r\n\r\n      this.node.on(cc.Node.EventType.TOUCH_MOVE, (event) => {\r\n        const point = event.getLocation();\r\n      });\r\n\r\n      this.node.on(cc.Node.EventType.TOUCH_END, (event) => {\r\n      });\r\n    },\r\n\r\n    init() {\r\n      cc.director.getCollisionManager().enabled = true;\r\n\r\n      this._isLoadEnd = false;\r\n      this._playerNum = 4;\r\n      \r\n      this._gameManager = new GameManager(this._playerNum, PLAYER_NAMES);\r\n      this._mapTileManager = new MapTileManager();\r\n    },\r\n\r\n    onLoad () {\r\n      this.init();\r\n      \r\n      cc.loader.load(cc.url.raw(\"resources/json/mapTile.json\"), (error, data) => {\r\n        if (error !== null) return;\r\n        this._mapTileManager.load(data);\r\n        this._isLoadEnd = true;\r\n      });\r\n    },\r\n\r\n    gameInit() {\r\n      this._gameManager.showPlayer();\r\n      this._gameManager.init();\r\n\r\n      this.updatePlayerDetail();\r\n\r\n      const playerIcons = [];\r\n      for (let i = 0; i < PLAYER_NAMES.length; i++) {\r\n        const playerIcon = this.node.getChildByName(PLAYER_NAMES[i]);\r\n        if (i < this._playerNum) {\r\n          playerIcons.push(playerIcon);\r\n        } else {\r\n          playerIcon.active = false;\r\n        }\r\n      }\r\n\r\n      const map = this.node.getChildByName(\"map\");\r\n      map.getComponent(\"map\").setMapTileManager(this._mapTileManager);\r\n      map.getComponent(\"map\").createEmptyMap(this._playerNum, playerIcons);\r\n\r\n      this.touchSetting();\r\n    },\r\n\r\n    start () {},\r\n\r\n    update (dt) {\r\n      if (this._isLoadEnd) {\r\n        this.gameInit();\r\n        this._isLoadEnd = false;\r\n      }\r\n    },\r\n});\r\n","const IconType = cc.Enum({\r\n  MEAT: 0,\r\n  VEGETABLE: 1,\r\n  DRINK: 2,\r\n  FRUITS: 3,\r\n  SPECIAL: 4,\r\n  ALL: 5,\r\n  START: 6,\r\n  EMPTY: 7,\r\n  REVERSE: 8,\r\n});\r\n\r\nconst IconNames = [\r\n  \"meat\",\r\n  \"vegetable\",\r\n  \"drink\",\r\n  \"fruits\",\r\n  \"special\",\r\n  \"all\",\r\n  \"start\",\r\n  \"empty\",\r\n  \"reverse\",\r\n]\r\n\r\nclass MapTileManager {\r\n  constructor() {\r\n    this._deck = null;\r\n    this._startMapTile = null;\r\n    this._mapTileData = null;\r\n  }\r\n\r\n  shuffle(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const n = Math.floor(cc.random0To1() * (i + 1));\r\n      const tmp = array[i];\r\n      array[i] = array[n];\r\n      array[n] = tmp;\r\n    }\r\n  }\r\n\r\n  load(data) {\r\n    this._mapTileData = data;\r\n    this._startMapTile = this._mapTileData.filter(x => x._type == IconType.START);\r\n    this.shuffle(this._startMapTile);\r\n  }\r\n\r\n  get startTiles() {\r\n    return this._startMapTile;\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  IconType: IconType,\r\n  IconNames: IconNames,\r\n  MapTileManager: MapTileManager,\r\n}","const MapTileManagerModule = require(\"./mapTIleManager\");\r\nconst IconType = MapTileManagerModule.IconType;\r\nconst IconNames = MapTileManagerModule.IconNames;\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n      mapTileAtlas: {\r\n        default: null,\r\n        type: cc.SpriteAtlas\r\n      },\r\n\r\n      _type: IconType.EMPTY,\r\n      _playerIcon: null,\r\n    },\r\n\r\n    setMapTile(iconType, data) {\r\n      this._type = iconType;\r\n      const icon = this.node.getChildByName(\"icon\");\r\n      icon.getComponent(cc.Sprite).spriteFrame = this.mapTileAtlas.getSpriteFrame(IconNames[this._type]);\r\n      const edges = this.node.getChildByName(\"edges\").getChildren();\r\n      const joins = data._join;\r\n      for (let i = 0; i < edges.length; i++) {\r\n        edges[i].getComponent(cc.Sprite).spriteFrame = this.mapTileAtlas.getSpriteFrame(\"edge\" + joins[i]);\r\n      }\r\n    },\r\n\r\n    setPlayerIcon(playerIcon) {\r\n      this._playerIcon = playerIcon;\r\n      this._playerIcon.removeFromParent();\r\n      this.node.addChild(this._playerIcon);\r\n      this._playerIcon.position = cc.p(-30, 30);\r\n    },\r\n\r\n    removePlayerIcon() {\r\n      this.node.removeChild(this._playerIcon);\r\n      const tmp = this._playerIcon;\r\n      this._playerIcon = null;\r\n      return tmp;\r\n    },\r\n\r\n    // onLoad () {},\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","const MapTileManagerModule = require(\"./modules/mapTIleManager\");\r\nconst IconType = MapTileManagerModule.IconType;\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n      mapTile : {\r\n        default: null,\r\n        type: cc.Prefab\r\n      },\r\n\r\n      _mapTileManager: null,\r\n\r\n      _mapWidth: 0,\r\n      _mapHeight: 0,\r\n    },\r\n\r\n    setMapTileManager(manager) {\r\n      this._mapTileManager = manager;\r\n    },\r\n\r\n    __setMapSize(playerNum) {\r\n      switch (playerNum) {\r\n        case 2:\r\n          this._mapWidth = 5;\r\n          this._mapHeight = 5;\r\n          break;\r\n        case 3:\r\n        case 4:\r\n          this._mapWidth = 7;\r\n          this._mapHeight = 7;\r\n          break;\r\n      }\r\n    },\r\n\r\n    __setStartMap(playerNum, playerIcons) {\r\n      const tiles = this.node.getChildren();\r\n      const startTiles = tiles.filter((n, i) => {\r\n        const x = i % this._mapWidth;\r\n        const y = Math.floor(i / this._mapWidth);\r\n        if (playerNum < 3) {\r\n          return n.active && (y == 0 || y == this._mapHeight - 1);\r\n        } else {\r\n          return n.active && (y == 0 || y == this._mapHeight - 1 || x == 0 || x == this._mapWidth - 1);\r\n        }\r\n      });\r\n\r\n      const startTileData = this._mapTileManager.startTiles;\r\n\r\n      for (let i = 0; i < startTiles.length; i++) {\r\n        startTiles[i].getComponent(\"mapTile\").setMapTile(IconType.START, startTileData[i]);\r\n        startTiles[i].getComponent(\"mapTile\").setPlayerIcon(playerIcons[i]);\r\n      }\r\n    },\r\n\r\n    createEmptyMap(playerNum, playerIcons) {\r\n      this.__setMapSize(playerNum);\r\n      \r\n      const rangeX = { start: - Math.floor(this._mapWidth / 2), end: Math.floor(this._mapWidth / 2)};\r\n      const rangeY = { start: - Math.floor(this._mapHeight / 2), end: Math.floor(this._mapHeight / 2)};\r\n      let activeTileX = 0;\r\n      let addX = 1;\r\n      for (let i = rangeX.start; i <= rangeX.end; i++) {\r\n        for (let j = rangeY.start; j <= rangeY.end; j++) {\r\n          const tile = cc.instantiate(this.mapTile);\r\n          const size = tile.getContentSize();\r\n          tile.position = cc.p(j * size.width, i * size.height);\r\n          tile.active = j >= -activeTileX && j <= activeTileX;\r\n          this.node.addChild(tile);\r\n        }\r\n        addX *= (i == 0 ? -1 : 1);\r\n        activeTileX += addX;\r\n      }\r\n\r\n      this.__setStartMap(playerNum,playerIcons);\r\n    },\r\n\r\n    onLoad () {\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","const PLAYER_DETAIL_WINDOW_ANIM_TIME = 0.2;\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n    },\n\n    open() {\n      this.node.active = true;\n      this.node.runAction(cc.scaleTo(PLAYER_DETAIL_WINDOW_ANIM_TIME, 1.0));\n    },\n\n    close(callback) {\n      this.node.runAction(cc.sequence(\n        cc.scaleTo(PLAYER_DETAIL_WINDOW_ANIM_TIME, 0),\n        cc.callFunc(() => {\n          this.node.active = false;\n          if (callback) {\n            callback();\n          }\n        })\n      ));\n    },\n\n    // onLoad () {},\n\n    start () {\n\n    },\n\n    // update (dt) {},\n});\n","class Player {\r\n  constructor(name, isOwn) {\r\n    this._name = name;\r\n    this._isOwn = isOwn;\r\n    this._point = 0;\r\n    this._foodHands = [];\r\n    this._specialHands = [];\r\n    this._cutomers = [];\r\n  }\r\n\r\n  get name() {\r\n    return this._name;\r\n  }\r\n  \r\n  get isOwn() {\r\n    return this._isOwn;\r\n  }\r\n\r\n  __addPoint(point) {\r\n    this._point += point;\r\n  }\r\n\r\n  get point() {\r\n    return this._point;\r\n  }\r\n\r\n  addCustomer(customer) {\r\n    this._cutomers.push(customer);\r\n  }\r\n\r\n  get customers() {\r\n    return this._cutomers;\r\n  }\r\n\r\n  addFoodHand(food) {\r\n    this._foodHands.push(food);\r\n  }\r\n\r\n  get foodHands() {\r\n    return this._foodHands;\r\n  }\r\n\r\n  addSpecialHand(special) {\r\n    this._specialHands.push(special);\r\n  }\r\n\r\n  get specialHands() {\r\n    return this._specialHands;\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  Player: Player,\r\n};"],"sourceRoot":"/source/","file":"project.js"}