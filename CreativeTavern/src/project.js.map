{"version":3,"sources":["assets/scripts/game.js","assets/scripts/map.js"],"names":["GameState","cc","Enum","PLAYING","PLAYER_DETAIL_WINDOW","PLAYER_HAND_WINDOW","Class","extends","Component","properties","_playerNum","_gameState","onTapClosePlayerDetailWindow","_this","this","playerDetailWindow","node","getChildByName","runAction","sequence","scaleTo","callFunc","active","onTapShowPlayerDetailWindow","onTapShowPlayerHandWindow","playerHandWindow","spawn","moveTo","p","onTapClosePlayeHandWindow","_this2","showActionFoodWindow","point","actions","getChildren","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","action","value","box","getComponent","BoxCollider","Intersection","pointInPolygon","world","points","actionFoodWindow","x","err","return","hideActionFoodWindow","touchSetting","_this3","on","Node","EventType","TOUCH_START","event","getLocation","TOUCH_MOVE","TOUCH_END","onLoad","director","getCollisionManager","enabled","createEmptyMap","start","mapTile","default","type","Prefab","_mapWidth","_mapHeight","_setMapSize","playerNum","rangeX","Math","floor","end","rangeY","activeTileX","addX","i","j","tile","instantiate","size","getContentSize","position","width","height","addChild"],"mappings":"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","sourcesContent":["const PLAYER_DETAIL_WINDOW_ANIM_TIME = 0.2;\r\nconst PLAYER_HAND_WINDOW_ANIM_TIME = 0.2;\r\n\r\nconst GameState = cc.Enum({\r\n  PLAYING: 0,\r\n  PLAYER_DETAIL_WINDOW: 1,\r\n  PLAYER_HAND_WINDOW: 2,\r\n});\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n      _playerNum: 4,\r\n      _gameState: GameState.PLAYING,\r\n    },\r\n\r\n    onTapClosePlayerDetailWindow() {\r\n      if (this._gameState != GameState.PLAYER_DETAIL_WINDOW) {\r\n        return;\r\n      }\r\n\r\n      const playerDetailWindow = this.node.getChildByName(\"playerDetailWindow\");\r\n      playerDetailWindow.runAction(cc.sequence(\r\n        cc.scaleTo(PLAYER_DETAIL_WINDOW_ANIM_TIME, 0),\r\n        cc.callFunc(() => {\r\n          playerDetailWindow.active = false;\r\n          this._gameState = GameState.PLAYING;\r\n        })\r\n      ));\r\n    },\r\n\r\n    onTapShowPlayerDetailWindow() {\r\n      const playerDetailWindow = this.node.getChildByName(\"playerDetailWindow\");\r\n      if (playerDetailWindow.active || this._gameState == GameState.PLAYER_DETAIL_WINDOW) {\r\n        return;\r\n      }\r\n\r\n      this._gameState = GameState.PLAYER_DETAIL_WINDOW;\r\n      playerDetailWindow.active = true;\r\n      playerDetailWindow.runAction(cc.scaleTo(PLAYER_DETAIL_WINDOW_ANIM_TIME, 1.0));\r\n    },\r\n\r\n    onTapShowPlayerHandWindow() {\r\n      const playerHandWindow = this.node.getChildByName(\"playerHandWindow\");\r\n      if (playerHandWindow.active || this._gameState == GameState.PLAYER_HAND_WINDOW) {\r\n        return;\r\n      }\r\n\r\n      this._gameState = GameState.PLAYER_HAND_WINDOW;\r\n      playerHandWindow.active = true;\r\n      playerHandWindow.runAction(cc.spawn(\r\n        cc.scaleTo(PLAYER_HAND_WINDOW_ANIM_TIME, 1.0),\r\n        cc.moveTo(PLAYER_HAND_WINDOW_ANIM_TIME, cc.p(0, -60))\r\n      ));\r\n    },\r\n\r\n    onTapClosePlayeHandWindow() {\r\n      if (this._gameState != GameState.PLAYER_HAND_WINDOW) {\r\n        return;\r\n      }\r\n\r\n      const playerHandWindow = this.node.getChildByName(\"playerHandWindow\");\r\n      playerHandWindow.runAction(cc.sequence(\r\n        cc.spawn(cc.scaleTo(PLAYER_HAND_WINDOW_ANIM_TIME, 0), cc.moveTo(PLAYER_HAND_WINDOW_ANIM_TIME, cc.p(340, -850))),\r\n        cc.callFunc(() => {\r\n          playerHandWindow.active = false;\r\n          this._gameState = GameState.PLAYING;\r\n        })\r\n      ));\r\n    },\r\n\r\n    showActionFoodWindow(point) {\r\n      const actions = this.node.getChildByName(\"actions\").getChildren();\r\n      for (let action of actions) {\r\n        const box = action.getComponent(cc.BoxCollider);\r\n        if (cc.Intersection.pointInPolygon(point, box.world.points)) {\r\n          const actionFoodWindow = this.node.getChildByName(\"actionFoodWindow\");\r\n          actionFoodWindow.active = true;\r\n          actionFoodWindow.x = action.x - 50;\r\n          break;\r\n        }\r\n      }\r\n    },\r\n\r\n    hideActionFoodWindow() {\r\n      this.node.getChildByName(\"actionFoodWindow\").active = false;\r\n    },\r\n\r\n    touchSetting() {\r\n      this.node.on(cc.Node.EventType.TOUCH_START, (event) => {\r\n        const point = event.getLocation();\r\n        this.showActionFoodWindow(point);\r\n      });\r\n\r\n      this.node.on(cc.Node.EventType.TOUCH_MOVE, (event) => {\r\n        const point = event.getLocation();\r\n        this.showActionFoodWindow(point);\r\n      });\r\n\r\n      this.node.on(cc.Node.EventType.TOUCH_END, (event) => {\r\n        this.hideActionFoodWindow();\r\n      });\r\n    },\r\n\r\n    onLoad () {\r\n      cc.director.getCollisionManager().enabled = true;\r\n\r\n      const map = this.node.getChildByName(\"map\");\r\n      map.getComponent(\"map\").createEmptyMap(this._playerNum);\r\n\r\n      this.touchSetting();\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n      mapTile : {\r\n        default: null,\r\n        type: cc.Prefab\r\n      },\r\n\r\n      _mapWidth: 0,\r\n      _mapHeight: 0,\r\n    },\r\n\r\n    _setMapSize(playerNum) {\r\n      switch (playerNum) {\r\n        case 2:\r\n          this._mapWidth = 5;\r\n          this._mapHeight = 5;\r\n          break;\r\n        case 3:\r\n        case 4:\r\n          this._mapWidth = 7;\r\n          this._mapHeight = 7;\r\n          break;\r\n      }\r\n    },\r\n\r\n    createEmptyMap(playerNum) {\r\n      this._setMapSize(playerNum);\r\n      \r\n      const rangeX = { start: - Math.floor(this._mapWidth / 2), end: Math.floor(this._mapWidth / 2)};\r\n      const rangeY = { start: - Math.floor(this._mapHeight / 2), end: Math.floor(this._mapHeight / 2)};\r\n      let activeTileX = 0;\r\n      let addX = 1;\r\n      for (let i = rangeX.start; i <= rangeX.end; i++) {\r\n        for (let j = rangeY.start; j <= rangeY.end; j++) {\r\n          const tile = cc.instantiate(this.mapTile);\r\n          const size = tile.getContentSize();\r\n          tile.position = cc.p(j * size.width, i * size.height);\r\n          tile.active = j >= -activeTileX && j <= activeTileX; \r\n          this.node.addChild(tile);\r\n        }\r\n        addX *= (i == 0 ? -1 : 1);\r\n        activeTileX += addX;\r\n      }\r\n    },\r\n\r\n    onLoad () {\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n"],"sourceRoot":"/source/","file":"project.js"}